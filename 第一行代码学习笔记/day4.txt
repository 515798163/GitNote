1.更多隐式Intent的用法
	使用隐式Intent，不仅可以启动自己程序内的活动，还可以启动其它程序的活动。使得Android多个应用程序之间的功能共享称为可能。
	例如在应用程序中展示一个网页：
		Intent intent = new Intent(Intent.ACTION_VIEW);
		intent.setData(Uri.parse("http://www.baidu.com"));
		startActivity(intent);
	首先指定Intent的action是Intent.ACTION_VIEW，这是一个Android系统内置的动作，其常量为android.intent.action.VIEW。然后通过Uri.parse()方法，将一个网址字符串解析成一个Uri对象，再调用Intent的setData()方法将这个Uri对象传递进去。
	setData接收一个Uri对象，主要用于指定当前Intent正在操作的数据，而这些数据通常都是以字符串的形式传入到Uri.parse()方法中解析产生的。
	
	除http协议之外，还可以指定其它很多协议，比如geo表示显示地理位置，tel表示拨打电话。
		Intent intent = new Intent(Intent.ACTION_DIAL);
		intent.setData(Uri.parse("tel:10086"));
	首先指定了Intent的action是Intent.ACTION_DIAL，这又是一个android系统的内置动作，然后再data部分指定了协议是tel，号码是10086
	
2.向下一个活动传递数据
		String data = "Hello SecondActivity";
		Intent intent = new Intent(FirstActivity.this,SecondActivity.class);
		intent.putExtra("extra_data",data);
		startActivity(intent);
	显式Intent的方式来启动SecondActivity，并通过putExtra()方法传递字符串。putExtra()方法接收两个参数，类似于setAttribute()，第一个参数是键，用于取值，第二个参数才是真正要传递的数据。
	
		Intent intent = getIntent();
        String data = intent.getStringExtra("extra_data");
        Log.d("Second Activity",data);
	通过getIntent()方法获取到用于启动SecondActivity的Intent，然后调用getStringExtra()方法，传入相应的键值，就可以得到传递的数据了。
	
3.返回数据给上一个活动
	返回上一个活动只需按一下Back键就可以了，并没有一个用于启动活动Intent来传递数据。但是Activity中还有一个startActivityForResult()方法也是用于启动活动的，这个方法期望在活动销毁的时候能够返回一个结果给上一个活动。
	startActivityForResult()方法接收两个参数，第一个参数还是Intent，第二个参数是请求码，用于在之后的回调中判断数据的来源。
		Intent intent = new Intent(FirstActivity.this,SecondActivity.class);
		startActivityForResult(intent,1);
	使用startActivityForResult()方法来启动SecondActivity，请求码是唯一值。

		Button button2 = (Button)findViewById(R.id.button_2);
        button2.setOnClickListener(new View.OnClickListener(){
				@Override
				public void onClick(View view) {
					Intent intent = new Intent();
					intent.putExtra("data_return","Hello FirstActivity");
					setResult(RESULT_OK,intent);
					finish();
				}	
			});
		}
	在SecondActivity中给button2注册点击事件，并在点击事件中添加返回数据的逻辑。同样，button的点击事件中还是构建了一个Intent，只不过这个Intent仅仅是用于传递数据而已，没有指定任何的“意图”，紧接着用putExtra()方法把传递的数据存放在intent中，然后调用了setResult()方法，专门用于向上一个活动返回数据。setResult()方法接收两个参数，第一个用于向上一个活动返回处理结果，一般只使用RESULT_OK或RESULT_CANCELED这两个值，第二个参数则是把带有数据的Intent传递回去，然后调用了finish()方法来销毁当前活动。
	
	protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        switch(requestCode){
            case 1:
                if(resultCode == RESULT_OK){
                    String returnedData = data.getStringExtra("data_return");
                    Log.d("FirstActivity",returnedData);
                }
                break;
                default:
        }
    }
	由于我们是使用startActivityForResult()方法来启动SecondActivity()的，在SecondActivity被销毁后会回调上一个活动的onActivityResult()方法，因此需要在FirstActivity中重写onActivityResult()方法。
	onActivityResult()方法带有三个参数，第一个参数requestCode，即在启动活动时传入的请求码。第二个参数resultCode即在我们返回数据时传入的处理结果。第三个参数data，即携带着返回数据的Intent。
	由于在一个活动中可能调用startActivityForResult()方法去启动很多个活动，每一个活动返回的数据都会回调到onActivityResult()方法中，因此首先要检查的是通过检查requestCode的值来判断数据来源。再通过resultCode的值来判断处理结果是否成功。最后从data中取值并打印出来，这样就完成了向上一个活动返回数据的工作。